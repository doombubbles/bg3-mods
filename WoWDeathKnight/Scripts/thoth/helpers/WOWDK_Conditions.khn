---@diagnostic disable: undefined-global

function SpellCheck(spell)
  return SpellId(spell) | IsSpellChildOrVariantFromContext(spell)
end

function KillingMachineSpellCheck()
  return SpellCheck('Target_Obliterate') | SpellCheck('Target_Obliterate_DW') | SpellCheck('Zone_Frostscythe')
end

function DeathGripCheck()
  local result = Dead() | Item() | Ally()
  if ~result.Result then
    local st = ~SavingThrow(Ability.Strength, context.Source.Strength)
    return ConditionResult(st.Result, {}, {}, st.Chance)
  end

  return result
end

function DistanceToTargetLessOrEqual(value)
  local errorTrue = { ConditionError("DistanceGreaterOrEqualThan_False",
    { ConditionErrorData.MakeFromNumber(value, EErrorDataType.Distance) }) }
  local errorFalse = { ConditionError("DistanceGreaterOrEqualThan_True",
    { ConditionErrorData.MakeFromNumber(value, EErrorDataType.Distance) }) }
  return ConditionResult(DistanceToTarget() <= value, errorFalse, errorTrue)
end

function HasRuneforge(entity)
  local entity = entity or context.Source
  local result = HasAnyStatus({ 'RUNE_RAZORICE', 'RUNE_FALLEN_CRUSADER', 'RUNE_STONESKIN_GARGOYLE' }, {}, {}, entity)
  return ConditionResult(result.Result, { ConditionError("HasNotRuneWeapon") }, { ConditionError("HasRuneWeapon") })
end

function HasRuneWeapon()
  local entity = entity or context.Source
  local weaponEntity = GetActiveWeapon(entity, true)
  if weaponEntity.IsValid then
    local result = Character(entity) & HasRuneforge(weaponEntity)
    return ConditionResult(result.Result, { ConditionError("HasNotRuneWeapon") }, { ConditionError("HasRuneWeapon") })
  end
  return ConditionResult(false, { ConditionError("HasNotRuneWeapon") }, { ConditionError("HasRuneWeapon") })
end

function RuneSpellCheck()
  return (
    HasUseCosts('BloodRune') | HasUseCosts('FrostRune') | HasUseCosts('UnholyRune') | HasUseCosts('AnyRune') | HasUseCosts('BloodOrFrostRune') | HasUseCosts('BloodOrUnholyRune') | HasUseCosts('FrostOrUnholyRune') |
    SpellCheck('Target_VampiricTouch_Free_DK') | SpellCheck('Target_Eyebite_Asleep_Free_DK') | SpellCheck('Target_Eyebite_Panicked_Free_DK') | SpellCheck('Target_Eyebite_Sickened_Free_DK') |
    SpellCheck('Target_FrostStrike') | SpellCheck('Target_Obliterate_DW')  | SpellCheck('Target_Obliterate') |
    SpellCheck('Target_DeathStrike')  | SpellCheck('Target_Marrowrend') | SpellCheck('Target_HeartStrike') |
    SpellCheck('Target_ScourgeStrike')  | SpellCheck('Target_FesteringStrike')
  )
end

function CarnageSpellCheck()
  return HasUseCosts('ActionPoint') & RuneSpellCheck() & ~ExtraAttackSpellCheck()
end

function IsKillingBlow()
    return HasDamageEffectFlag(DamageFlags.KillingBlow) | (~HasStatus('WILDSHAPE_TECHNICAL', context.Target) & HasHPLessThan(1))
end

function BlowsUp(die) -- Never Stop Blowing Up!
  return ConditionResult(math.random(1, die) == die)
end

function FrostmourneSoulCheck(entity)
  entity = entity or context.Target
  return ~Tagged('UNDEAD', entity) & ~Party() & ~Tagged('PLAYABLE') & ~Tagged('AVATAR') & ~Tagged('CONSTRUCT') &
      ~Tagged('ELEMENTAL') & ~Tagged('PLANT') & ~Tagged('OOZE') &
      ~Tagged('MINDFLAYER') -- According to Withers
end

function KilledByFrostmourne(entity)
  local entity = entity or context.Target
  local soul = HasStatus('FROSTMOURNE_SOUL', entity)
  return ConditionResult(soul.Result, { ConditionError("NotKilledByFrostmourne") })
end

function DD(dmg, entity)
  local entity = entity or GetSummoner(context.Source)

  local total = 0

  if (HasPassive('Dreadblade', entity) & ~HasStatus('DREADBLADE_SELF_BLOCKED', entity)).Result then
    total = total + entity.ProficiencyBonus
  end

  if HasStatus('ELEMENTALAFFINITY_NECROTIC_EXTRA_DAMAGE_TECHNICAL', entity).Result then
    total = total + max(GetModifier(entity.Charisma), 0)
  end

  if HasStatus('ELEMENTALAFFINITY_NECROTIC_EXTRA_DAMAGE_TECHNICAL_MAGICIAN', entity).Result then
    total = total + max(GetModifier(entity.Intelligence), 0)
  end


  return ConditionResult(total == dmg)
end
