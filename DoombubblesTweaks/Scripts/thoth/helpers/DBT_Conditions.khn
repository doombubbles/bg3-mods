---@diagnostic disable: undefined-global, undefined-field

function ShouldPactBladeOverride(entity)
  local weapon = entity or context.Source
  local owner = GetOwner(weapon)
  if HasWeaponProperty(WeaponProperties.Finesse, weapon).Result or WieldingFinesseWeapon(owner).Result then
    -- Seems like just the HasWeaponProperty doesn't seem to work
    return ConditionResult(owner.Charisma > owner.Dexterity) & ConditionResult(owner.Charisma > owner.Strength)
  else
    return ConditionResult(owner.Charisma > owner.Strength)
  end
end

function ShouldWeaponBondOverride(entity)
  local weapon = entity or context.Source
  local owner = GetOwner(weapon)
  if HasWeaponProperty(WeaponProperties.Finesse, weapon).Result or WieldingFinesseWeapon(owner).Result then
    -- Seems like just the HasWeaponProperty doesn't seem to work
    return ConditionResult(owner.Intelligence > owner.Dexterity) & ConditionResult(owner.Intelligence > owner.Strength)
  else
    return ConditionResult(owner.Intelligence > owner.Strength)
  end
end

function GuidingBoltCheck()
  return SpellId('Projectile_GuidingBolt')
      | SpellId('Projectile_MAG_GuidingBolt_MonkGloves')
      | IsSpellChildOrVariantFromContext('Projectile_GuidingBolt')
end

function EldritchBlastCheck()
  return SpellId('Projectile_EldritchBlast')
      | SpellId('Projectile_MAG_EldritchBlast_Staff')
      | IsSpellChildOrVariantFromContext('Projectile_EldritchBlast')
      | SpellId('Projectile_FireRay_Warlock')
      |
      (IsSpell() & SpellDamageTypeIs(DamageType.Fire) & HasPassive('PactOfDestruction', context.Source) & HasPassive('ThirstingBlade_Check', context.Source))
end

function FlySpellCheck()
  return SpellId('Projectile_Fly') | SpellId('Projectile_Fly_Spell') | SpellId('Projectile_TAD_Levitate')
end

function AttackingWithPiercingWeapon(entity)
  entity = entity or context.Target
  local weapon = GetAttackWeapon(entity)

  if HasWeaponProperty(WeaponProperties.Ammunition, weapon).Result then
    return ConditionResult(true)
  end

  local piercingWeapons = {
    'Daggers',
    'Javelins',
    'Spears',
    'Morningstars',
    'Rapiers',
    'Shortswords',
    'WarPicks',
    'Tridents',
    'Pikes'
  }

  for i, group in ipairs(piercingWeapons) do
    if IsOfProficiencyGroup(group, weapon).Result then
      return ConditionResult(true)
    end
  end

  return ConditionResult(false)
end

function BonusToSpellDC(entity)
  local entity = entity or context.Source
  local baseAmount = 8 + entity.ProficiencyBonus + GetModifier(entity.Strength)

  local dc = SourceSpellDC(baseAmount, entity, Ability.Strength)

  return math.max(0, dc - baseAmount)
end

function HeightenedConjurationSpellCheck()
  return (HasStringInSpellRoll('SavingThrow') | HasStringInFunctorConditions('SavingThrow') | HasStringInSpellRoll('SpellAutoResolveOnAlly')) &
      (HasSpellFlag(SpellFlags.Spell) & IsSpellOfSchool(SpellSchool.Conjuration))
end

function HasNoMainHand(entity)
  entity = entity or context.Source
  result = ~WieldingWeapon('Melee', false, false, entity)
  return ConditionResult(result.Result, { ConditionError("HasWeaponInMainHand") },
    { ConditionError("HasNotWeaponInMainHand") })
end

function HasNoOffHand(entity)
  entity = entity or context.Source
  result = ~WieldingWeapon('Melee', true, false, entity) &
      ~(WieldingWeapon('Twohanded', false, false, entity) & WieldingWeapon('Melee', false, false, entity))
  return ConditionResult(result.Result, { ConditionError("HasWeaponInOffHand") },
    { ConditionError("HasNotWeaponInOffHand") })
end

function IEC(passive)
  return ~IsWeaponAttack() & ~IsUnarmedAttack() &
      (HasUseCosts('KiPoint') | SpellId('Projectile_RayOfFrost_Monk') | SpellId('Target_ShockingGrasp_Monk')) &
      HasPassive(passive, context.Source)
end

function BM(passive)
  return HasNoMainHand() & IsCantrip() & SpellAttackCheck() & HasPassive(passive, context.Source)
end

function IsUnarmedWildshape()
  return (HasStatus('SG_Polymorph_BeastShape', context.Source) | HasStatus('SLAYER_PLAYER', context.Source) | HasStatus('SLAYER_PLAYER_10', context.Source)) &
      ~(Tagged('MYRMIDON_AIR', context.Source) | Tagged('MYRMIDON_FIRE', context.Source) | Tagged('MYRMIDON_WATER', context.Source))
end

function IsKillingBlow()
    return HasDamageEffectFlag(DamageFlags.KillingBlow) | (~HasStatus('WILDSHAPE_TECHNICAL', context.Target) & HasHPLessThan(1))
end

function IsDamageTypeUnarmed()
  return ConditionResult(context.HitDescription.GetDamageDoneForType(DamageType.Bludgeoning) > 0)
end

function HeavyWeaponMasterMelee(entity)
  local entity = entity or context.Source
  local weapon = GetActiveWeapon(entity, true)

  local isTwoHanded = HasWeaponProperty(WeaponProperties.Twohanded, weapon)
  local isMelee = HasWeaponProperty(WeaponProperties.Melee, weapon)
  local isVersatile = HasWeaponProperty(WeaponProperties.Versatile, weapon)
  local isOffhandMelee = WieldingWeapon('Melee', true, false, entity)
  local isOffhandAmmunition = WieldingWeapon('Ammunition', true, false, entity)
  local hasShield = HasShieldEquipped(entity)

  local res = IsProficientWith(entity, weapon) &
      ((isTwoHanded & isMelee) | (isVersatile & ~isOffhandMelee & ~isOffhandAmmunition & ~hasShield))

  return ConditionResult(res.Result, { ConditionError("HasNotHeavyWeapon") }, { ConditionError("HasHeavyWeapon") })
end

function HeavyWeaponMasterRanged(entity)
  local entity = entity or context.Source
  local weapon = GetActiveWeapon(entity, true)

  local isTwoHanded = HasWeaponProperty(WeaponProperties.Twohanded, weapon)
  local isRanged = HasWeaponProperty(WeaponProperties.Ammunition, weapon)

  local res = IsProficientWith(entity, weapon) & isRanged & isTwoHanded

  return ConditionResult(res.Result, { ConditionError("HasNotHeavyWeapon") }, { ConditionError("HasHeavyWeapon") })
end

function IsEldritchSmite()
  return SpellId('Target_Smite_Eldritch') | SpellId('Target_Smite_Eldritch_2') | SpellId('Target_Smite_Eldritch_3') |
      SpellId('Target_Smite_Eldritch_4') | SpellId('Target_Smite_Eldritch_5') | SpellId('Target_Smite_Eldritch_6')
end

function HasWeaponInOffHand()
  result = WieldingWeapon('Melee', true)
  return ConditionResult(result.Result, { ConditionError("HasNotWeaponInMainHand") },
    { ConditionError("HasWeaponInMainHand") })
end

function IsMovementSpeedStatus()
  return StatusId('HASTE')
      | StatusId('MAG_CELESTIAL_HASTE')
      | StatusId('POTION_OF_SPEED')
      | StatusId('TAD_MIND_SANCTUARY_HASTE')
      | StatusId('CONS_DRUG_STIMULANT')
      | StatusId('HASTE_SURFACE')
      | StatusId('HASTE_MYRMIDON')
      | StatusId('MAG_MOMENTUM')
      | StatusId('BLADESONG')
      | StatusId('LONGSTRIDER')
      | StatusId('GOB_DROWCOM_BUFF')
      | StatusId('MOO_BLOODPOTION_ELF')
      | StatusId('RAGE_TOTEM_ELK')
      | StatusId('PACK_HOWL_WOLF_DIRE')
      | StatusId('MAG_MARTIAL_EXERTION')
      | StatusId('HALF_MOVEMENT')
      | StatusId('DREAD_AMBUSHER')
      | StatusId('ASPECT_OF_THE_ELK')
      | StatusId('ASPECT_OF_THE_ELK_AURA')
      | StatusId('TRANSMUTERS_STONE_MOVEMENTSPEED')
      | StatusId('REGENERATION_SABERTOOTH')
      | StatusId('WEB_BUFF_SPIDER_ACTIVE')
      | StatusId('RELENTLESS_AVENGER')
      | StatusId('DRUNKEN_TECHNIQUE')
end

function CasterLevelCheck(level, entity)
  local entity = entity or context.Source
  local casterLevel = 0
  if HasStatus('SS_6_1', entity).Result then
    casterLevel = 11
  elseif HasStatus('SS_5_2', entity).Result then
    casterLevel = 10
  elseif HasStatus('SS_5_1', entity).Result then
    casterLevel = 9
  elseif HasStatus('SS_4_2', entity).Result then
    casterLevel = 8
  elseif HasStatus('SS_4_1', entity).Result then
    casterLevel = 7
  elseif HasStatus('SS_3_3', entity).Result then
    casterLevel = 6
  elseif HasStatus('SS_3_2', entity).Result then
    casterLevel = 5
  elseif HasStatus('SS_2_3', entity).Result then
    casterLevel = 4
  elseif HasStatus('SS_2_2', entity).Result then
    casterLevel = 3
  elseif HasStatus('SS_1_3', entity).Result then
    casterLevel = 2
  elseif HasStatus('SS_1_2', entity).Result then
    casterLevel = 1
  end

  return ConditionResult(casterLevel == level)
end